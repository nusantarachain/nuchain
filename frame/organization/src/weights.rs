// This file is part of Nuchain.
//
// Copyright (C) 2021-2022 Rantai Nusantara Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_organization
//!
//! THIS FILE WAS AUTO-GENERATED USING THE NUCHAIN BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-07, STEPS: `10`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/nuchain
// benchmark
// --chain=dev
// --steps=10
// --repeat=5
// --pallet=pallet_organization
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=frame/organization/src/weights.rs
// --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_organization.
pub trait WeightInfo {
	fn create() -> Weight;
	fn update() -> Weight;
	fn suspend_org() -> Weight;
	fn set_flags() -> Weight;
	fn add_members(n: u32, ) -> Weight;
	fn remove_member() -> Weight;
	fn set_admin() -> Weight;
	fn delegate_access() -> Weight;
	fn revoke_access() -> Weight;
	fn delegate_access_as() -> Weight;
	fn transfer() -> Weight;
}

/// Weights for pallet_organization using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Organization OrgIdIndex (r:1 w:1)
	// Storage: Organization OrganizationIndexOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Did OwnerOf (r:1 w:1)
	// Storage: Did AttributeNonce (r:1 w:1)
	// Storage: Did AttributeOf (r:1 w:1)
	// Storage: Organization Members (r:0 w:1)
	// Storage: Organization Organizations (r:0 w:1)
	// Storage: Organization OrganizationFlagData (r:0 w:1)
	// Storage: Did UpdatedBy (r:0 w:1)
	fn create() -> Weight {
		(130_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:1)
	fn update() -> Weight {
		(42_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:1)
	fn suspend_org() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Organization OrganizationFlagData (r:1 w:1)
	fn set_flags() -> Weight {
		(21_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Organization Members (r:1 w:1)
	fn add_members(n: u32, ) -> Weight {
		(44_693_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((6_737_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Organization Members (r:1 w:1)
	fn remove_member() -> Weight {
		(47_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Members (r:1 w:0)
	// Storage: Organization Organizations (r:1 w:1)
	fn set_admin() -> Weight {
		(46_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Did OwnerOf (r:1 w:0)
	// Storage: Did DelegateOf (r:1 w:1)
	fn delegate_access() -> Weight {
		(35_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Did DelegateOf (r:1 w:1)
	// Storage: Did UpdatedBy (r:0 w:1)
	fn revoke_access() -> Weight {
		(32_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Did OwnerOf (r:1 w:0)
	// Storage: Did DelegateOf (r:1 w:1)
	fn delegate_access_as() -> Weight {
		(34_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn transfer() -> Weight {
		(64_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Organization OrgIdIndex (r:1 w:1)
	// Storage: Organization OrganizationIndexOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Did OwnerOf (r:1 w:1)
	// Storage: Did AttributeNonce (r:1 w:1)
	// Storage: Did AttributeOf (r:1 w:1)
	// Storage: Organization Members (r:0 w:1)
	// Storage: Organization Organizations (r:0 w:1)
	// Storage: Organization OrganizationFlagData (r:0 w:1)
	// Storage: Did UpdatedBy (r:0 w:1)
	fn create() -> Weight {
		(130_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:1)
	fn update() -> Weight {
		(42_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:1)
	fn suspend_org() -> Weight {
		(16_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Organization OrganizationFlagData (r:1 w:1)
	fn set_flags() -> Weight {
		(21_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Organization Members (r:1 w:1)
	fn add_members(n: u32, ) -> Weight {
		(44_693_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((6_737_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Organization Members (r:1 w:1)
	fn remove_member() -> Weight {
		(47_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Members (r:1 w:0)
	// Storage: Organization Organizations (r:1 w:1)
	fn set_admin() -> Weight {
		(46_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Did OwnerOf (r:1 w:0)
	// Storage: Did DelegateOf (r:1 w:1)
	fn delegate_access() -> Weight {
		(35_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Did DelegateOf (r:1 w:1)
	// Storage: Did UpdatedBy (r:0 w:1)
	fn revoke_access() -> Weight {
		(32_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: Did OwnerOf (r:1 w:0)
	// Storage: Did DelegateOf (r:1 w:1)
	fn delegate_access_as() -> Weight {
		(34_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Organization Organizations (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn transfer() -> Weight {
		(64_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
